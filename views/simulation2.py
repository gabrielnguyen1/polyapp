# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OjPbYcS8S_X6YILkvM7h4d9hwe9U4T3s
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

def euler_method(initial_concentration, rate_constant, time_step, total_time):
    """
    Simulate concentration changes over time using Euler's method.

    Parameters:
        initial_concentration (float): Initial concentration of the reactant (mol/L).
        rate_constant (float): Reaction rate constant (1/s).
        time_step (float): Time step for the simulation (s).
        total_time (float): Total simulation time (s).

    Returns:
        times (numpy array): Array of time points.
        concentrations (numpy array): Array of reactant concentrations over time.
    """
    # Initialize arrays for time and concentration
    times = np.arange(0, total_time, time_step)
    concentrations = np.zeros_like(times)

    # Set initial concentration
    concentrations[0] = initial_concentration

    # Euler's method to simulate concentration change
    for i in range(1, len(times)):
        dA_dt = -rate_constant * concentrations[i-1]
        concentrations[i] = concentrations[i-1] + dA_dt * time_step

    return times, concentrations

def arrhenius_equation(A, Ea, T):
    """
    Calculate the rate constant using the Arrhenius equation.

    Parameters:
        A (float): Pre-exponential factor (1/s).
        Ea (float): Activation energy (J/mol).
        T (float): Temperature (K).

    Returns:
        rate_constant (float): Reaction rate constant (1/s).
    """
    R = 8.314  # Universal gas constant (J/molÂ·K)
    rate_constant = A * np.exp(-Ea / (R * T))
    return rate_constant

def calculate_degree_of_polymerization(concentration_initial, concentration_final):
    """
    Calculate the degree of polymerization (DP).

    Parameters:
        concentration_initial (float): Initial concentration of the monomer (mol/L).
        concentration_final (float): Final concentration of the monomer (mol/L).

    Returns:
        dp (float): Degree of polymerization.
    """
    if concentration_initial == concentration_final:
        return float('inf')  # To avoid division by zero if no reaction occurred
    dp = concentration_initial / (concentration_initial - concentration_final)
    return dp

# Streamlit App
st.title("Polymerization Reaction Simulation")

# User input for simulation parameters
initial_concentration = st.slider('Initial Concentration (mol/L):', min_value=0.1, max_value=10.0, value=1.0, step=0.1)
A = st.number_input('Pre-exponential Factor (1/s):', min_value=1e3, max_value=1e7, value=1e6, step=1e5, format="%.0e")
Ea = st.number_input('Activation Energy (J/mol):', min_value=10000, max_value=100000, value=50000, step=5000)
time_step = st.slider('Time Step (s):', min_value=0.01, max_value=1.0, value=0.1, step=0.01)
total_time = st.slider('Total Time (s):', min_value=10, max_value=200, value=50, step=10)
temperatures = st.multiselect('Select Temperatures (K):', [300, 350, 400, 450, 500], default=[300, 350, 400])

# Run the simulation when the button is clicked
if st.button('Run Simulation'):
    # Create a new figure for plotting
    fig, ax = plt.subplots(figsize=(12, 8))

    # Loop through each selected temperature and simulate
    for T in temperatures:
        # Calculate rate constant using Arrhenius equation
        rate_constant = arrhenius_equation(A, Ea, T)
        # Run Euler's method for the concentration change
        times, concentrations = euler_method(initial_concentration, rate_constant, time_step, total_time)
        # Calculate the degree of polymerization
        dp = calculate_degree_of_polymerization(initial_concentration, concentrations[-1])
        # Plot the concentration over time for the given temperature
        ax.plot(times, concentrations, label=f'T = {T} K, DP = {dp:.2f}')

    # Customize the plot
    ax.set_title('Polymerization Reaction: Concentration vs. Time')
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Concentration (mol/L)')
    ax.legend()
    ax.grid()

    # Display the plot in Streamlit
    st.pyplot(fig)

    # Display some results
    st.write("### Simulation Results")
    st.write(f"Initial Concentration: {initial_concentration} mol/L")
    st.write(f"Pre-exponential Factor (A): {A:.2e} 1/s")
    st.write(f"Activation Energy (Ea): {Ea} J/mol")
    st.write(f"Selected Temperatures: {temperatures}")